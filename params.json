{"name":"Background bunnies","tagline":"AMQP Bunny background workers","body":"# BackgroundBunnies\r\n\r\nBackground workers based on AMQP Bunny gem\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'background_bunnies'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install background_bunnies\r\n\t\r\n## How it Works\r\n\r\nBackground Bunnies are workers fed by producers and broadcasters.\r\n\r\n* A producer will create jobs intended for bunnies of type `queue` and only one worker will process the job. This is the default configuration.\r\n* A broadcasters will produce jobs intented for bunnies of type `broadcast` and every single worker will receive the same job.\r\n\r\n## Work Queues\r\n\r\nA work client uses AMQP queues and only one bunny will perform the job, this is known as a work queue. This is the default configuration for all the bunnies.\r\n\r\nExample Bunny Worker:\r\n\r\n\trequire 'background_bunnies'\r\n\t\r\n\tclass BackgroundBunnies::Workers::ImageTransform\r\n\t  include BackgroundBunnies::Bunny\r\n\t  group :images\r\n\r\n\t  def process(job)\r\n\t\timage_url = job.payload[:image_url] # https://encrypted.google.com/images/srpr/logo4w.png\r\n\t    # perform image transformation here\r\n\t  end\r\n\tend\r\n\t\r\n    BackgroundBunnies.configure(:main, \"amqp://guest:guest@127.0.0.1\")\r\n\tBackgroundBunnies.run(:images) # block forever while running the workers\r\n\r\nExample Client:\r\n\r\n    BackgroundBunnies.configure(:main, \"amqp://guest:guest@127.0.0.1\")\r\n    producer = BackgroundBunnies::Workers::ImageTransform.create_producer :images\r\n\tproducer.enqueue(image_path: \"https://encrypted.google.com/images/srpr/logo4w.png\")\r\n\r\n## Broadcast\r\n\r\nA broadcast client uses AMQP queues to `fanout` the same job across many worker bunnies, bunnies will receive the job when mode `broadcast` is used.\r\n\r\nExample Bunny worker:\r\n\r\n\trequire 'background_bunnies'\r\n\t\r\n\tclass BackgroundBunnies::Workers::RelyMessage\r\n\t  include BackgroundBunnies::Bunny\r\n\t  type :broadcast # tell the bunny worker it should use queue as broadcast\r\n\t  group :messaging\r\n\r\n\t  def process(job)\r\n\t\tsubject = job.payload[:subject] # \"Spread this message across all the worker nodes\"\r\n\t    # do your thing here\r\n\t  end\r\n\tend\r\n\t\r\n\tBackgroundBunnies.configure(:main, \"amqp://guest:guest@127.0.0.1\")\r\n\tBackgroundBunnies.run(:messaging) # block forever while running the workers\r\n\r\nExample Client:\r\n\r\n    BackgroundBunnies.configure(:main, \"amqp://guest:guest@127.0.0.1\")\r\n    producer = BackgroundBunnies::Workers::RelyMessage.create_brodacaster :messaging\r\n\tproducer.enqueue(subject: \"Spread this message across all the worker nodes\")\r\n\r\n## Error Handling\r\n\r\nIn the case an exception is raised while executing the method `process`, the job will be put back on the queue so it can be processed in another time or by another worker. Even if the worker crashes, the job will be processed in another time or by another worker eventually.\r\n\r\nBunnies provide a method you could override to determinate which errors should cause the job to be requeued or skipped.\r\n\r\nReturn `true` if you want to skip the job, the default is requeue the job on every error.\r\n\r\n    def on_error(job, err)\r\n\t  # true and the job will be skipped.\r\n\t  # false and the job will be requeued. This is the default.\r\n    end\r\n\r\n\r\n## Configuring Connection Strings\r\n\r\nBunnies will be executed together under the same configuration group. The default group is `:default`.\r\n\r\nA group share the same connection uri across the producers, broadcasters and bunnies:\r\n\r\nExample:\r\n\r\n    BackgroundBunnies.configure(:default, \"amqp://guest:guest@127.0.0.1\")\r\n\r\n## Executing a group of Workers\r\n\r\nInstead initializing and running a single worker manually, background bunnies executes in groups.\r\n\r\n\tBackgroundBunnies.run(:default) # block forever while running the workers\r\n\r\n## Workers as custom Rake Tasks\r\n\r\nIf you want to run your workers as a rake task in for example, a Rails app, you can create one as follows:\r\n\r\nCreate a file in `lib/tasks/images.rb`:\r\n\r\n\tnamespace :mybunnies do\r\n\t  task :images=>:environment do\r\n\t    BackgroundBunnies.run(:images)\r\n\t  end\r\n\tend\r\n\r\nYou can then run from the command line:\r\n\r\n\trake mybunnies:images\r\n\r\n## Logging\r\n\r\nIn your worker bunnies you can use `log_error`, `log_warn` and `log_info` to log information formatted as part of BackgroundBunnies to `$stderr` and `$stdout`.\r\n\r\nExample:\r\n\r\n\tdef process(job)\r\n\t  log_error \"An error occurred\"\r\n\t  log_info \"Something Happened\"\r\n\t  log_warn \"Beware of this\"\r\n\tend\r\n\r\nOutput:\r\n\r\n    [error] BackgroundBunnies -> Songs: An error occurred\r\n    [info] BackgroundBunnies -> Songs: Something Happened\r\n    [warn] BackgroundBunnies -> Songs: Beware of this\r\n\t\r\n\r\n## Examples\r\n\r\nCheck `/examples`.\r\n\r\n## License (MIT)\r\n\r\nCopyright (c) 2012-2014 Bithavoc.io and Contributors - http://bithavoc.io\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"UA-54890957-1","note":"Don't delete this file! It's used internally to help with page regeneration."}